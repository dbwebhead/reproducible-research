library(ggplot2)
require(zipcode)
data(zipcode)
head(zipcode)
disaster_df$region = substr(disaster_df$ZipCode, 1, 1)
# clean disaster zipcode
disaster_df$ZipCode <- clean.zipcodes(disaster_df$ZipCode)
disaster_df2 <- merge(disaster_df, zipcode, by.x='ZipCode', by.y='zip')
library(ggmap)
myMap <- get_map(location='united states', zoom=4, maptype = "terrain",
source='google',color='color')
?get_map
require("ggplot2")
ggmap(myMap) +
geom_point(data=disaster_df2,
aes(x=longitude, y=latitude, show_guide = TRUE),
alpha=.8, na.rm = TRUE)  +
scale_color_gradient(low="beige", high="blue")
g = ggplot(data=disaster_df2) +
geom_point(aes(x=longitude, y=latitude, colour=region))
g = g + theme_bw() + scale_x_continuous(limits = c(-125,-66)) ## , breaks = NA
g = g + scale_y_continuous(limits = c(25,50)) ## , breaks = NA
g = g + labs(x=NULL, y=NULL)
print(g)
myMap <- get_map(location='united states', zoom=4, maptype = "terrain",
source='google',color='color')
ggmap(myMap) +
geom_point(data=disaster_df2,
aes(x=longitude, y=latitude, show_guide = TRUE),
alpha=.8, na.rm = TRUE)  +
scale_color_gradient(low="beige", high="blue")
library(ggmap)
myMap <- get_map(location='united states', zoom=4, maptype = "terrain",
source='google',color='color')
myMap <- get_map(location='austrailia',
zoom=4,
maptype = "terrain",
source='google',color='color')
?get_map
myMap <- get_map(location='united states',
zoom=4,
maptype = "terrain",
source='osm', # source='google'
color='color')
myMap <- get_map(location='united states',
zoom=4,
maptype = "terrain",
source='stamen', # source='google'
color='color')
reqMapPkgs <- c("RCurl",     ## Downloads https data
"xlsx",      ## MS Excel reader
"zipcode",   ## US zipcode tools and data
"curl",      ## Web client for R
"ggmap",     ## Map visualization
"ggplot2")   ## Grammar of graphics
ipak <- function(pkg)
{
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(reqMapPkgs)
library(devtools)
library(curl)
library(RCurl)
library(xlsx)
urlfile <-'http://www.psc.isr.umich.edu/dis/census/Features/tract2zip/MedianZIP-3.xlsx'
destfile <- "census20062010.xlsx"
download.file(urlfile, destfile, mode="wb")
census <- read.xlsx2(destfile, sheetName = "Median")
head(census)
str(census)
names(census)
census <- census[c('Zip','Median..')]
head(census)
names(census) <- c('Zip','Median')
census$Median <- as.character(census$Median)
census$Median <- as.numeric(gsub(',','',census$Median))
print(head(census,5))
require(zipcode)
data(zipcode)
head(zipcode)
census$Zip <- clean.zipcodes(census$Zip)
head(census$Zip)
census <- merge(census, zipcode, by.x='Zip', by.y='zip')
head(census)
require(ggmap)
myMap <- get_map(location='united states', zoom=4, maptype = "terrain",
source='google',color='color')
require("ggplot2")
ggmap(myMap) + geom_point(data=census,
aes(x=longitude, y=latitude, show_guide = TRUE, colour=state),
alpha=.8, na.rm = T)  +
scale_color_gradient(low="beige", high="blue")
db <- "CAPSS.mdb"
con2 <- odbcConnectAccess2007(db)
close(ch)
odbcClose(ch)
close(con2)
db <- "CAPSS.mdb"
con2 <- odbcConnectAccess2007(db)
sqlTables(con2, tableType = “TABLE”)
sqlTables(con2, tableType = "TABLE")
sqlTables(con2)
sqlTables(con2, tableType = "TABLE")$TABLE_NAME
cp_df <- sqlFetch(con2,"CP")
str(cp_df)
qry <- "SELECT * FROM CP"
cp_df <- sqlQuery(con2, qry)
str(cp_df)
all_req_access_pkgs <-
c("DBI",
"RODBC",
"devtools",
"Rcpp",
"colorspace",
"zipcode",   ## US zipcode tools and data
"curl",      ## Web client for R
"ggmap",     ## Map visualization
"ggplot2")   ## Grammar of graphics
ipak <- function(pkg)
{
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(all_req_access_pkgs)
require(DBI)         ## database interface
require(RODBC)
require(devtools)
require(data.table)
db <- "CAPSS.mdb"
con2 <- odbcConnectAccess2007(db)
all_req_access_pkgs <-
c("DBI",
"RODBC",
"devtools",
"Rcpp",
"colorspace",
"zipcode",   ## US zipcode tools and data
"curl",      ## Web client for R
"ggmap",     ## Map visualization
"ggplot2")   ## Grammar of graphics
ipak <- function(pkg)
{
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(all_req_access_pkgs)
require(DBI)         ## database interface
require(RODBC)
require(devtools)
require(data.table)
db <- "CAPSS.mdb"
con2 <- odbcConnectAccess2007(db)
all_req_access_pkgs <-
c("DBI",
"RODBC",
"devtools",
"Rcpp",
"colorspace",
"zipcode",   ## US zipcode tools and data
"curl",      ## Web client for R
"ggmap",     ## Map visualization
"ggplot2")   ## Grammar of graphics
ipak <- function(pkg)
{
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(all_req_access_pkgs)
db <- "CAPSS.mdb"
con2 <- odbcConnectAccess2007(db)
sqlTables(con2, tableType = "TABLE")$TABLE_NAME
cp_df <- sqlFetch(con2,"CP")
str(cp_df)
qry <- "SELECT * FROM CP"
cp_df <- sqlQuery(con2, qry)
str(cp_df)
table(cp_df)
odbcCloseAll()
disaster_df <- sqlQuery( ch , paste (
"select *
from DISASTER"))
ch <- odbcConnect(dsn="CAPSS")
disaster_df <- sqlQuery( ch , paste (
"select *
from DISASTER"))
head(disaster_df)
close(ch)
str(disaster_df)
summary(disaster_df)
dim(diaster_df)
dim(disaster_df)
library(zipcode)
library(Rcpp)
library(ggplot2)
require(zipcode)
data(zipcode)
head(zipcode)
disaster_df$region = substr(disaster_df$ZipCode, 1, 1)
disaster_df$ZipCode <- clean.zipcodes(disaster_df$ZipCode)
disaster_df2 <- merge(disaster_df, zipcode, by.x='ZipCode', by.y='zip')
library(ggmap)
myMap <- get_map(location='united states',
zoom=4,
maptype = "terrain",
source='google',
color='color')
require("ggplot2")
ggmap(myMap) +
geom_point(data=disaster_df2,
aes(x=longitude, y=latitude, show_guide = TRUE),
alpha=.8, na.rm = TRUE)  +
scale_color_gradient(low="beige", high="blue")
ggmap(myMap) +
geom_point(data=disaster_df2,
aes(x=longitude, y=latitude, show_guide = FALSE),
alpha=.8, na.rm = TRUE)  +
scale_color_gradient(low="beige", high="blue")
install.packages("kernlab")
install.packages("knitr")
library("devtools", lib.loc="~/R/win-library/3.3")
devtools::install_github('johnmyleswhite/ProjectTemplate')
library("swirl", lib.loc="~/R/win-library/3.3")
library("swirl")
if (!require("swirl")) {
install.packages("swirl", dependencies = TRUE)
}
library("swirl")
require(swirl)
require("swirl")
install_course("Getting and Cleaning Data")
install_course("Regression Models")
install_course("Statistical Inference")
install_course("R Programming")
install_course("R Programming")
install_course("Data Analysis")
install_course("Getting and Cleaning Data")
reqMapPkgs <- c("RCurl",     ## Downloads https data
"xlsx",      ## MS Excel reader
"zipcode",   ## US zipcode tools and data
"curl",      ## Web client for R
"ggmap",     ## Map visualization
"ggplot2")   ## Grammar of graphics
ipak <- function(pkg)
{
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(reqMapPkgs)
library(devtools)
library(curl)
library(RCurl)
library(xlsx)
urlfile <-'http://www.psc.isr.umich.edu/dis/census/Features/tract2zip/MedianZIP-3.xlsx'
destfile <- "census20062010.xlsx"
download.file(urlfile, destfile, mode="wb")
census <- read.xlsx2(destfile, sheetName = "Median")
census <- census[c('Zip','Median..')]
head(census)
names(census) <- c('Zip','Median')
census$Median <- as.character(census$Median)
census$Median <- as.numeric(gsub(',','',census$Median))
print(head(census,5))
require(zipcode)
data(zipcode)
head(zipcode)
census$Zip <- clean.zipcodes(census$Zip)
head(census$Zip)
require(ggmap)
myMap <- get_map(location='united states', zoom=4, maptype = "terrain",
source='google',color='color')
require("ggplot2")
ggmap(myMap) + geom_point(data=census,
aes(x=longitude, y=latitude, show_guide = TRUE, colour=state),
alpha=.8, na.rm = T)  +
scale_color_gradient(low="beige", high="blue")
myMap <- get_map(location='united states', zoom=4, maptype = "terrain",
source='google',color='color')
install.packages(c("caret", "dygraphs", "htmlwidgets", "hunspell", "knitr", "RefManageR", "scales", "SparseM", "XML"))
install.packages(c("caret", "dygraphs", "htmlwidgets", "hunspell", "knitr", "RefManageR", "scales", "SparseM", "XML"))
install.packages(c("caret", "dygraphs", "htmlwidgets", "hunspell", "knitr", "RefManageR", "scales", "SparseM", "XML"))
install.packages(c("caret", "dygraphs", "htmlwidgets", "hunspell", "knitr", "RefManageR", "scales", "SparseM", "XML"))
myMap <- get_map(location='united states', zoom=4, maptype = "terrain",
source='google',color='color')
require(ggmap)
myMap <- get_map(location='united states', zoom=4, maptype = "terrain",
source='google',color='color')
all_req_access_pkgs <-
c("DBI",
"RODBC",
"devtools",
"Rcpp",
"colorspace",
"zipcode",   ## US zipcode tools and data
"curl",      ## Web client for R
"ggmap",     ## Map visualization
"ggplot2")   ## Grammar of graphics
ipak <- function(pkg)
{
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(all_req_access_pkgs)
library("ggmap", lib.loc="~/R/win-library/3.3")
library("ggplot2", lib.loc="~/R/win-library/3.3")
detach("package:ggmap", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
if (!require("ggplot2")) {
install.packages("ggplot2", dependencies = TRUE)
}
if (!require("ggmap")) {
install.packages("ggmap", dependencies = TRUE)
}
require(DBI)         ## database interface
require(RODBC)
require(devtools)
require(data.table)
ch <- odbcConnect(dsn="CAPSS")
disaster_df <- sqlQuery( ch , paste (
"select *
from DISASTER"))
close(ch)
head(disaster_df)
str(disaster_df)
summary(disaster_df)
names(disaster_df)
dim(disaster_df)
library(zipcode)
library(Rcpp)
library(ggplot2)
require(zipcode)
data(zipcode)
head(zipcode)
disaster_df$region = substr(disaster_df$ZipCode, 1, 1)
disaster_df$region = substr(disaster_df$ZipCode, 1, 1)
disaster_df$ZipCode <- clean.zipcodes(disaster_df$ZipCode)
disaster_df2 <- merge(disaster_df, zipcode, by.x='ZipCode', by.y='zip')
library(ggmap)
myMap <- get_map(location='united states',
zoom=4,
maptype = "terrain",
source='google',
color='color')
install_course("Mathematical Biostatistics Boot Camp")
library(swirl)
install_course("Mathematical Biostatistics Boot Camp")
install.packages(c("caret", "colorspace", "gdtools", "ggplot2", "maptools", "pkgKitten", "plotly", "plotmo", "Rcpp", "RefManageR", "rgdal", "XML", "yaml"))
library(readxl)
mgive_monthly_ra_volume <- read_excel("C:/Users/hallm/Desktop/R Code and Data/mgive_monthly_ra_volume.xlsx")
View(mgive_monthly_ra_volume)
#########################################################################################
## Install necessary packages (check to see if they exist already)
if (!require("ggplot2")) {
install.packages("ggplot2", dependencies = TRUE)
}
all_required_dbase_packages <-
c("teradataR",
"DBI",
"RODBC",
"devtools"
)
ipak <- function(pkg)
{
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(all_required_dbase_packages)
## Invoke packages
require(teradataR)
require(DBI)
require(RODBC)
require(devtools)
require(data.table)
require(ggplot2)
ch <- odbcConnect(dsn="TDDWNEWPRO",uid="armktg_dba_user",pwd="01Mod$16")
ch <- odbcConnect(dsn="TDDWNEWPRO",uid="arcmktg_dba_user",pwd="01Mod$16")
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts))  ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts) (FORMAT '99')) AS YearMonth,
COUNT(*) AS ra_cnt
from arc_stage_tbls.pre_id_cnst
GROUP BY 1
ORDER BY 1; '))
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts)) ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts) (FORMAT '99')) AS YearMonth,
COUNT(*) AS ra_cnt
from arc_stage_tbls.pre_id_cnst
GROUP BY 1
ORDER BY 1 '))
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts)) ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts) (FORMAT '99')) AS YearMonth,
COUNT(*) AS ra_cnt
FROM arc_stage_tbls.pre_id_cnst
GROUP BY 1
'))
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts)) ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts) (FORMAT '99')) AS YearMonth,
COUNT(YearMonth) AS ra_cnt
FROM arc_stage_tbls.pre_id_cnst
GROUP BY 1
ORDER BY 1 '))
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts)) ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts) ) AS YearMonth,
COUNT(YearMonth) AS ra_cnt
FROM arc_stage_tbls.pre_id_cnst
GROUP BY 1
ORDER BY 1 '))
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts)) ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts)(FORMAT '99') ) AS YearMonth,
COUNT(YearMonth) AS ra_cnt
FROM arc_stage_tbls.pre_id_cnst
GROUP BY 1
ORDER BY 1 '))
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts)) ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts)(FORMAT 99) ) AS YearMonth,
COUNT(YearMonth) AS ra_cnt
FROM arc_stage_tbls.pre_id_cnst
GROUP BY 1
ORDER BY 1 '))
head(mgive_ra_df)
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts)) ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts)) AS YearMonth,
COUNT(YearMonth) AS ra_cnt
FROM arc_stage_tbls.pre_id_cnst
GROUP BY 1
ORDER BY 1 '))
head(mgive_ra_df)
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts)) ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts) FORMAT'99') AS YearMonth,
COUNT(YearMonth) AS ra_cnt
FROM arc_stage_tbls.pre_id_cnst
GROUP BY 1
ORDER BY 1 '))
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts)) ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts) FORMAT 99) AS YearMonth,
COUNT(YearMonth) AS ra_cnt
FROM arc_stage_tbls.pre_id_cnst
GROUP BY 1
ORDER BY 1 '))
head(mgive_ra_df)
mgive_ra_df <- sqlQuery(ch, paste('
SELECT
TRIM(EXTRACT(YEAR FROM srcsys_trans_ts)) ||
TRIM(EXTRACT(MONTH FROM srcsys_trans_ts)) AS YearMonth,
COUNT(*) AS ra_cnt
FROM arc_stage_tbls.pre_id_cnst
GROUP BY 1
ORDER BY 1 '))
head(mgive_ra_df)
ggplot(mgive_ra_df, x=YearMonth, y=ra_cnt) +
aes(YearMonth, ra_cnt) +
geom_smooth(method="lm", size=2, linetype=3) +
geom_point(aes(color = YearMonth),
size=4, alpha=1/2) +
labs(title="Reverse Appended mGive Volume Over Time",
x="Year/Month", y="mGive Reverse Append Count")
ggplot(mgive_ra_df, x=ra_cnt, y=YearMonth) +
aes(YearMonth, ra_cnt) +
geom_smooth(method="lm", size=2, linetype=3) +
## geom_point(aes(color = YearMonth), size=4, alpha=1/2) +
labs(title="Reverse Appended mGive Volume Over Time",
x="mGive Reverse Append Count", y="Year/Month")
plot(mgive_ra_df)
install.packages(c("BH", "colorspace", "DEoptimR", "mokken", "slam"))
require(knitr)
require(markdown)
if(!require(installr)) {
install.packages("installr");
require(installr) } #load / install+load installr
# Installing pandoc
install.pandoc()
setwd('C:\Users\hallm\Desktop\COURSERA-RR')
setwd('C:/Users/hallm/Desktop/COURSERA-RR')
getwd
getwd()
getwd()
activity_df <- read.csv("activity.csv")
setwd("C:/Users/hallm/Desktop/COURSERA-RR")
activity_df <- read.csv("activity.csv")
